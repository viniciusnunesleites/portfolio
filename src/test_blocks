import unittest

from blocks import *
from main import *
from blocks import extract_title

class TestBlockType(unittest.TestCase):
    def test_block_to_block_type(self):
        block = """# This is a heading

        This is a paragraph of text. It has some *bold* and italic words inside of it.

        - This is the first list item in a list block
        - This is a list item
        - This is another list item"""
        split_block = block.split("\n\n")
        self.assertEqual(block_to_block_type(split_block[0]), BlockType.HEADING)
        self.assertEqual(block_to_block_type(split_block[1]), BlockType.PARAGRAPH)
        self.assertEqual(block_to_block_type(split_block[2]), BlockType.UNORDERED_LIST)


class TestTextNode(unittest.TestCase):
    def test_paragraphs(self):
        md = """This is **bolded** paragraph text in a p tag here

This is another paragraph with _italic_ text and `code` here"""
        node = markdown_to_html_node(md)
        html = node.to_html()
        self.assertEqual(
            html,
            "<div><p>This is <b>bolded</b> paragraph text in a p tag here</p><p>This is another paragraph with <i>italic</i> text and <code>code</code> here</p></div>",
        )

    def test_codeblock(self):
        md = """```
This is text that _should_ remain
the **same** even with inline stuff
```"""
        node = markdown_to_html_node(md)
        html = node.to_html()
        self.assertEqual(
            html,
            "<div><pre><code>This is text that _should_ remain\nthe **same** even with inline stuff\n</code></pre></div>",
        )

    def test_extract_title(self):
        md = "# this is a title test"
        title = extract_title(md)
        self.assertEqual(title, "this is a title test")

if __name__ == "__main__":
    unittest.main()